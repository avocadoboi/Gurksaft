// Global styles

@use 'global';
@use 'sass:math';

// These are the theme colors written as RGB triplets.
// Allows for changing the alpha like so:
// oklch(var(--some-color) / 0.1)

// @mixin generate-tones($name, $chroma, $hue) {
// 	@each $percentage in 0, 1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100 {
// 		--#{$name}-#{$percentage}: #{$percentage}% #{$chroma} #{$hue};
// 	}
// }

@function get-tone($base-name, $percentage) {
	@return '#{$percentage}% var(#{$base-name})';
}

@mixin generate-color-palette($name, $is-light) {
	@if $is-light {
		--#{$name}: #{get-tone(--#{$name}-base, 40)};
		--on-#{$name}: #{get-tone(--#{$name}-base, 100)};
		--#{$name}-container: #{get-tone(--#{$name}-base, 90)};
		--on-#{$name}-container: #{get-tone(--#{$name}-base, 10)};
	}
	@else {
		--#{$name}: #{get-tone(--#{$name}-base, 80)};
		--on-#{$name}: #{get-tone(--#{$name}-base, 20)};
		--#{$name}-container: #{get-tone(--#{$name}-base, 30)};
		--on-#{$name}-container: #{get-tone(--#{$name}-base, 90)};
	}
}

:root {	
	// chroma hue
	--neutral-base: 5% 305;
	--neutral-variant-base: 2% 305;
	--primary-base: 100% 305;
	--secondary-base: 20% 280;
	--tertiary-base: 50% 116;//200;//225;
	--bad-base: 100% 19;
	--good-base: 60% 143;

	@each $color in primary, secondary, tertiary, bad, good {
		@include generate-color-palette($color, $is-light: false);
	}
	--surface: #{get-tone(--neutral-base, 15)};
	--surface-container-lowest: #{get-tone(--neutral-base, 13)};
	--surface-container-low: #{get-tone(--neutral-base, 18)};
	--surface-container: #{get-tone(--neutral-base, 21)};
	--surface-container-high: #{get-tone(--neutral-base, 24)};
	--surface-container-highest: #{get-tone(--neutral-base, 27)};
	--on-surface: #{get-tone(--neutral-base, 90)};
	--on-surface-variant: #{get-tone(--neutral-variant-base, 80)};
	--outline: #{get-tone(--neutral-variant-base, 60)};
	--outline-variant: #{get-tone(--neutral-variant-base, 30)};
	
	// --highlight: 210, 230, 255;
	--shadow-opacity: 0.5;
}

@media (prefers-color-scheme: light) {
	:root {
		@each $color in primary, secondary, tertiary, bad, good {
			@include generate-color-palette($color, $is-light: true);
		}
		--surface: #{get-tone(--neutral-base, 98)};
		--surface-container-lowest: #{get-tone(--neutral-base, 100)};
		--surface-container-low: #{get-tone(--neutral-base, 96)};
		--surface-container: #{get-tone(--neutral-base, 94)};
		--surface-container-high: #{get-tone(--neutral-base, 92)};
		--surface-container-highest: #{get-tone(--neutral-base, 90)};
		--on-surface: #{get-tone(--neutral-base, 10)};
		--on-surface-variant: #{get-tone(--neutral-variant-base, 30)};
		--outline: #{get-tone(--neutral-variant-base, 50)};
		--outline-variant: #{get-tone(--neutral-variant-base, 80)};

		// --highlight: 0, 0, 0;
		--shadow-opacity: 0.3;
	}
}

@font-face {
	font-family: jost;
	src: url(assets/Jost-VariableFont_wght.ttf);
}

:root {
	font-family: jost;
}

@font-face {
	font-family: 'Material Symbols Outlined';
	font-style: normal;
	font-weight: 100 700;
	src: url(assets/material-symbols-outlined.woff2) format('woff2');
}

.material-symbols {
	font-family: 'Material Symbols Outlined';
	font-weight: normal;
	font-style: normal;
	font-size: 1.1em;
	line-height: 1;
	letter-spacing: normal;
	text-transform: none;
	display: inline-block;
	white-space: nowrap;
	word-wrap: normal;
	direction: ltr;
	font-feature-settings: 'liga';
	-webkit-font-feature-settings: 'liga';
	-webkit-font-smoothing: antialiased;

	font-variation-settings:
		'FILL' 1,
		'wght' 700,
		'GRAD' 0,
		'opsz' 48;
}

*,
*::before,
*::after {
	box-sizing: border-box;
}

body {
	// margin: 2em;
	margin: 0;
	padding: 0;
	
	display: flex;
	flex-direction: column;
	align-items: center;

	background-color: oklch(var(--surface-container-lowest));
	
	color: oklch(var(--on-surface));
	font-size: 1.3em;
	cursor: default;
	user-select: none;
}

h1 {
	font-size: 2em;
	font-weight: normal;
	margin-top: 0;
	margin-bottom: 1em;
	text-align: center;
	width: 100%;
}
h2 {
	font-size: 1.5em;
	font-weight: normal;
	margin-top: 0;
	margin-bottom: 0.7em;
}
h3 {
	font-size: 1.2em;
	font-weight: normal;
	margin-top: 0;
	margin-bottom: 0.7em;
}

p {
	margin: 0;
}

a {
	text-decoration: none;
	color: oklch(var(--tertiary));
}

button {
	background-color: oklch(var(--primary));
	color: oklch(var(--on-primary));
	border-radius: 2em;
	border: none;
	cursor: pointer;
	padding: 0.45em 1em;
	
	font-family: jost;
	font-weight: 500;
	font-size: 1em;
	box-shadow: 0px 1px 4px rgb(0, 0, 0, var(--shadow-opacity));
	transition: box-shadow 200ms global.$ease-in-out;

	display: flex;
	flex-direction: row;
	align-items:center;
	gap: 0.4em;
}
button:hover  {
	box-shadow: 0px 1.5px 6px rgb(0, 0, 0, var(--shadow-opacity));
}

button:disabled {
	box-shadow: 0px 1px 4px rgb(0, 0, 0, var(--shadow-opacity));
	background-color: oklch(var(--surface-container-highest));
	color: oklch(var(--on-surface-variant));
	opacity: 0.7;
	cursor: default;
}

.outline-button {
	background-color: oklch(var(--surface));
	color: oklch(var(--primary));
	border: 1px solid oklch(var(--outline-variant));
	box-shadow: none;
	// font-weight: 600;
}
.outline-button:hover, .bad-button:hover {
	box-shadow: 0px 1px 2px rgb(0, 0, 0, 10%);
}

.secondary-button {
	background-color: oklch(var(--secondary));
	border: none;
	color: oklch(var(--on-secondary));
}
.tertiary-button {
	background-color: oklch(var(--tertiary-container));
	border: none;
	color: oklch(var(--on-tertiary-container));
}

.bad-button {
	background-color: oklch(var(--surface-container-low));
	color: oklch(var(--bad));
	border: 1px solid oklch(var(--outline-variant));
	box-shadow: none;
}

input {
	box-sizing: content-box;
	background-color: oklch(var(--surface-container-low));
	color: oklch(var(--on-surface));
	outline: none;
	// border: 2px solid oklch(var(--));
	border: none;
	border-bottom: 2.5px solid oklch(var(--primary));
	// border-radius: 0.2em;
	border-radius: 0.2em 0.2em 0 0;
	width: 3em;
	// padding: 0.5em;
	padding-left: 0.4em;

	font-family: jost;
	font-size: 1em;

	transition: background-color 200ms global.$ease-in-out;
}

input:focus {
	background-color: oklch(var(--surface-container));
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
	-webkit-appearance: none;
	margin: 0;
}

input[type=number] {
	appearance: textfield;
	-moz-appearance: textfield;
}

.good {
    color: oklch(var(--good));
}

.hover-overlay {
	pointer-events: none;
	position: absolute;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	transition: background-color 50ms global.$ease-in-out;
	opacity: 0.08;
}

.ripple-instance {
	pointer-events: none;
	position: absolute;
	transform: translateX(-50%) translateY(-50%) scale(0);
	transition: background-color 900ms global.$ease-in-out;//,
		//transform 700ms cubic-bezier(0.05, 0.95, 0, 1);
	opacity: 0.3;
}

.header-bar {
	width: 100%;
	// padding: 0.5em 1em;
	padding: 0 1em;
	display: flex;
	flex-direction: row;
	gap: 0.6em;
	align-items: center;
	// margin-top: 1em;
	margin-bottom: 1em;
	// background-color: oklch(var(--surface-container));
	// border-radius: 2em;
}
.header-bar > h1 {
	text-align: left;
	margin: 0;
	width: auto;
	flex-grow: 1;
}
.header-bar > button {
	font-size: 0.8em;
}

.header-bar > .back-button {
	background-color: oklch(var(--surface));
    border: 1px solid oklch(var(--outline-variant));
    border-radius: 50%;
    padding: 0.2em;
    font-size: 1.7em;
	// box-shadow: 0 0.5px 2px oklch(0, 0, 0, 0.2);
    box-shadow: none;
	// color: oklch(var(--primary));
	// background-color: oklch(var(--neutral-10));
	color: oklch(var(--primary));
}

.content {
	display: flex;
	flex-direction: column;
	width: 100%;
	// gap: 0.6em;
	background-color: oklch(var(--surface));
	border-radius: 1em;
	padding: 1em;
}
